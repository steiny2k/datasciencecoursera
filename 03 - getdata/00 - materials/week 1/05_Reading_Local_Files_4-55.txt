This next lecture is about reading local
what are called flat files.
These are examples prime examples are text
files, [UNKNOWN]
limited text files, comment delimited text
files and so forth.
If you've actually already taken the art
programming class you may be able to
skip this lecture because you've already
seen how to load the a into R.
So again we're going to go back to the
Baltimore fixed camera data.
And so I'm going to again download the
data.
I'm going to check to see if the data
directory exists.
And if it doesn't, I'm going to create it.
Then I'm going to download the data with
download.file.
So now the data have been downloaded from
the website, and
actually is sitting on my computer, it's
local data to my computer.
So the first thing that you might want to
use to load the
data, and the most common way that they're
loaded is with the read.table function.
And so read.table is the most common
function, because it's
the most robust and it allows you the most
flexibility.
In some ways in R, it's, does require a
few more
parameters than you would pass to some of
the other functions.
And it can be a little bit slow, so
there's actually faster ways if you
need to scan through files to find
specific
elements, and we might talk about those
later.
It reads the data into RAM, so it reads
the data into memory and this ca, so if
you have a really, really big data set, it
can cause problems unless you read it in
chunk.
Read.tables also probably not the best way
to read large data sets in general into R.
So the important parameters here are what
file
you want to read, whether it has a header.
What's the separation between elements?
Whether it had row names and how many rows
you want to read.
The related files read related
functions.csv
and read.csv2 will also be briefly
discussed.
So if we want to read the camera data, we
can try just sending it to read.table just
like this.
We say camera data is going to be the
variable we're going to assign.
And we're going to use the read.csv
and we're going to read the file on
camera.csv.
And the problem you'll get back
immediately is an error says line one did
not have 13 elements and the reason why is
there are commas separating cameras.csv.
But the default for read.table is to look
for a tab delimited file.
So if you actually try to look at this,
variable, camera
data, it doesn't exist because I wasn't
able to read it in.
So what we can do instead is, read.table
with setting the sep command.
So there's the separation, we're going to
set it equal
to quotes comma and so, what that does is
that says, look through the file and
assume that
all the different values will be separated
by commas.
We're also going to tell it header equals
true, because the variable
names are included at the top of each
column in the file.
So if we do that, and assign the results,
the camera data variable.
And then use the head command, this will
look at the top few rows of that file.
And so for example, the first row now we
see we have data on the first
camera, it wraps around because of the fo,
the way that the slide looks here.
But each row has now been read into one
row of the camera data variable.
You could also use read.csv, in the case
that you have a csv file.
It automatically sets sep equal to the,
quote,
comma, and it automatically sets header
equals to true.
And so, if you have a CSV file, which is
one of the
most common flat formats you'll see for
data, you can use the read.csv command.
So more important parameters that you can
pass, for
example, to read.table, is you can tell it
quotes.
So for example, you can say whether there
are quoted values.
So if you say quote equals quote quote,
like that, you get, no quotes in the file.
NA dot strings tell, R what the character
is that represents a missing value.
So, the most typical character that you'll
see in R, data sets is NA.
But that character might also be minus
one, or
nine hundred ninety nine ninety nine, or
something else.
Num N rows tells you how many rows of the
files to read.
So for example if you only want to read
the first ten lines of the file you
can use N rows equal to ten as one of the
arguments to the read.table function.
Skip will also tell you how many lines to
skip before you read.
So for example suppose you want to read
the third through the thirteenth line.
You would set skip equal to two and, and
rows equal to ten.
So my experience suggests that the biggest
common problem that I see in a lot of
files is that you see one these quotation
marks placed in the data value somewhere.
So when that happens, R gets confused
because it's not looking for those quotes.
And so, if you set quote equal to, quote
quote, this often
resolves those issues, and then you won't
have to deal with them.
So, it, it's just a helpful tip whenever
you see, sort of, data
sets that aren't getting read in or
getting read in as very long vectors.
Setting this quote variable in that way
can be one way to address it.
[SOUND]

